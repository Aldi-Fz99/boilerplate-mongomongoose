/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/

const express = require("express");
const app = express();
let mongoose;
try {
  mongoose = require("mongoose");
} catch (e) {
  console.log(e);
}
const fs = require("fs");
const path = require("path");
const bodyParser = require("body-parser");
const router = express.Router();

const enableCORS = function (req, res, next) {
  if (!process.env.DISABLE_XORIGIN) {
    const allowedOrigins = ["https://www.freecodecamp.org"];
    const origin = req.headers.origin;
    if (!process.env.XORIGIN_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(req.method);
      res.set({
        "Access-Control-Allow-Origin": origin,
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers":
          "Origin, X-Requested-With, Content-Type, Accept",
      });
    }
  }
  next();
};

// global setting for safety timeouts to handle possible
// wrong callbacks that will never be called
const TIMEOUT = 10000;

app.use(bodyParser.urlencoded({ extended: "false" }));
app.use(bodyParser.json());

app.get("/", function (req, res) {
  res.sendFile(path.join(__dirname, "views", "index.html"));
});

router.get("/file/*?", function (req, res, next) {
  if (req.params[0] === ".env") {
    return next({ status: 401, message: "ACCESS DENIED" });
  }
  fs.readFile(path.join(__dirname, req.params[0]), function (err, data) {
    if (err) {
      return next(err);
    }
    res.type("txt").send(data.toString());
  });
});

router.get("/is-mongoose-ok", function (req, res) {
  if (mongoose) {
    res.json({ isMongooseOk: !!mongoose.connection.readyState });
  } else {
    res.json({ isMongooseOk: false });
  }
});

const Person = require("./myApp.js").PersonModel;

router.use(function (req, res, next) {
  if (req.method !== "OPTIONS" && Person.modelName !== "Person") {
    return next({ message: "Person Model is not correct" });
  }
  next();
});

router.post("/mongoose-model", function (req, res, next) {
  // try to create a new instance based on their model
  // verify it's correctly defined in some way
  let p;
  p = new Person(req.body);
  res.json(p);
});

const { createAndSavePerson, PersonModel } = require("./myApp");
router.get("/create-and-save-person", async function (req, res, next) {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);

  try {
    const data = await createAndSavePerson();
    clearTimeout(t);

    const pers = await PersonModel.findById(data._id);
    if (!pers) {
      return next({ message: "Person not found" });
    }

    await PersonModel.deleteOne({ _id: pers._id }); // Menggunakan deleteOne
    res.json(pers);
  } catch (err) {
    clearTimeout(t);
    next(err);
  }
});

const { createManyPeople } = require("./myApp");
router.post("/create-many-people", async (req, res, next) => {
  try {
    await Person.deleteMany({});

    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject({ message: "timeout" }), TIMEOUT)
    );

    const data = await Promise.race([
      createManyPeople(req.body),
      timeoutPromise,
    ]);

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    const pers = await Person.find({});
    res.json(pers);
  } catch (err) {
    next(err);
  } finally {
    await Person.deleteMany({});
  }
});

const { findPeopleByName } = require("./myApp.js");
router.post("/find-all-by-name", async (req, res, next) => {
  try {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject({ message: "timeout" }), TIMEOUT)
    );

    // Create a new person and wait for it to complete
    const pers = await Promise.race([Person.create(req.body), timeoutPromise]);

    // Assuming findByName is a function that returns a promise
    const data = await findPeopleByName(pers.name);

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    await Person.deleteMany({}); // Use deleteMany instead of remove
  }
});

const { findOneByFood } = require("./myApp.js");

router.post("/find-one-by-food", async (req, res, next) => {
  try {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject({ message: "timeout" }), TIMEOUT)
    );

    // Create a new person and wait for it to complete
    const p = new Person(req.body);
    const pers = await Promise.race([p.save(), timeoutPromise]);

    // Use findOneByFood function to find a person by their favorite food
    const data = await findOneByFood(pers.favoriteFoods[0]);

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    // Clean up by deleting the person record if needed
    await Person.deleteOne({ _id: p._id }); // Use deleteOne to clean up
  }
});

const { findPersonById } = require("./myApp.js");

router.get("/find-by-id", async (req, res, next) => {
  try {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject({ message: "timeout" }), TIMEOUT)
    );

    // Create a new person and save it
    const p = new Person({ name: "test", age: 0, favoriteFoods: ["none"] });
    const pers = await Promise.race([p.save(), timeoutPromise]);

    // Use findPersonById to find the person by ID
    const data = await findPersonById(pers._id);

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    // Clean up by deleting the person record
    await Person.deleteOne({ _id: p._id }); // Use deleteOne instead of remove
  }
});

const { findEditThenSave } = require("./myApp.js");

router.post("/find-edit-save", async (req, res, next) => {
  let p; // Deklarasikan p di sini

  try {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject({ message: "timeout" }), TIMEOUT)
    );

    // Buat objek Person baru dan simpan
    p = new Person(req.body); // Assign ke p di sini
    const pers = await Promise.race([p.save(), timeoutPromise]);

    // Gunakan findEditThenSave untuk mencari dan mengedit orang berdasarkan ID
    const data = await findEditThenSave(pers._id);

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    // Hapus entri spesifik
    if (p) {
      await Person.deleteOne({ _id: p._id }); // Pastikan p didefinisikan sebelum digunakan
    }
  }
});

const { findAndUpdate } = require("./myApp.js");

router.post("/find-one-update", async (req, res, next) => {
  let timeoutId;
  let p; // Deklarasikan p di sini

  try {
    const timeoutPromise = new Promise((_, reject) => {
      timeoutId = setTimeout(() => reject({ message: "timeout" }), TIMEOUT);
    });

    // Buat objek Person baru dan simpan
    p = new Person(req.body); // Assign ke p di sini
    const pers = await Promise.race([p.save(), timeoutPromise]);

    // Gunakan findAndUpdate untuk memperbarui data
    const data = await findAndUpdate(pers.name);

    // Cek apakah data tidak ditemukan
    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    // Bersihkan timeout
    clearTimeout(timeoutId);

    // Hapus entri spesifik jika p didefinisikan
    if (p) {
      await Person.deleteOne({ _id: p._id }); // Hapus menggunakan deleteOne
    }
  }
});

const { removeById } = require("./myApp.js");
router.post("/remove-one-person", async (req, res, next) => {
  let p; // Deklarasikan p di sini
  let timeoutId;

  try {
    // Hapus semua orang dari koleksi
    await Person.deleteOne({}); // Gunakan deleteMany untuk menghapus semua

    const timeoutPromise = new Promise((_, reject) => {
      timeoutId = setTimeout(() => reject({ message: "timeout" }), TIMEOUT);
    });

    // Buat objek Person baru dan simpan
    p = new Person(req.body);
    const pers = await Promise.race([p.save(), timeoutPromise]);

    // Gunakan removeById untuk menghapus orang berdasarkan ID
    let data = await removeById(pers._id); // Ubah const menjadi let

    if (!data) {
      console.log("Missing `done()` argument");
      return next({ message: "Missing callback argument" });
    }

    console.log(data);

    // Hitung jumlah orang yang tersisa
    const count = await Person.countDocuments(); // Gunakan countDocuments

    data = data.toObject(); // Ini sekarang aman karena data dideklarasikan dengan let
    data.count = count;
    console.log(data);

    res.json(data);
  } catch (err) {
    next(err);
  } finally {
    // Bersihkan timeout
    clearTimeout(timeoutId);
  }
});

const { removeManyPeople } = require("./myApp.js");
router.post("/remove-many-people", async (req, res, next) => {
  let timeoutId;

  try {
    // Hapus semua orang dari koleksi
    await Person.deleteMany({});

    // Set timeout
    const timeoutPromise = new Promise((_, reject) => {
      timeoutId = setTimeout(() => reject({ message: "timeout" }), TIMEOUT);
    });

    // Buat orang baru
    const pers = await Person.create(req.body);

    // Tunggu removeMany
    const data = await Promise.race([removeManyPeople(), timeoutPromise]);
    clearTimeout(timeoutId);

    // Hitung jumlah orang yang tersisa
    const count = await Person.countDocuments();

    res.json({
      n: data.n,
      count,
      ok: data.ok,
    });
  } catch (err) {
    // Tangani timeout secara spesifik
    if (err.message === "timeout") {
      return next({ message: "Request timed out" });
    }
    next(err);
  }
});

const { queryChain } = require("./myApp.js");
router.post("/query-tools", async (req, res, next) => {
  let t = setTimeout(() => {
    next({ message: "timeout" });
  }, TIMEOUT);

  try {
    await Person.deleteMany({}); // Mengganti `remove` dengan `deleteMany`

    const pers = await Person.create(req.body);

    // Gantilah `chain` dengan `queryChain` yang sudah diperbarui
    const data = await queryChain();

    clearTimeout(t); // Hentikan timer jika berhasil
    res.json(data);
  } catch (err) {
    clearTimeout(t); // Pastikan timer dihentikan saat terjadi error
    next(err);
  }
});
app.use("/_api", enableCORS, router);

// Error handler
app.use(function (err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

// Unmatched routes handler
app.use(function (req, res) {
  if (req.method.toLowerCase() === "options") {
    res.end();
  } else {
    res.status(404).type("txt").send("Not Found");
  }
});

const listener = app.listen(process.env.PORT || 3000, function () {
  console.log("Your app is listening on port " + listener.address().port);
});

/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/
